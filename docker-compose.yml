version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: workos_fullstack
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DJANGO_SECRET_KEY=docker-development-key-change-in-production
      - DJANGO_DEBUG=True
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/workos_fullstack
      - WORKOS_API_KEY=${WORKOS_API_KEY:-sk_test_your_api_key}
      - WORKOS_CLIENT_ID=${WORKOS_CLIENT_ID:-client_your_client_id}
      - WORKOS_REDIRECT_URI=${WORKOS_REDIRECT_URI:-http://localhost:3000/auth/callback}
      - WORKOS_COOKIE_PASSWORD=${WORKOS_COOKIE_PASSWORD:-32-character-minimum-secret-key-123456}
      - SIMPLEJWT_SIGNING_KEY=${SIMPLEJWT_SIGNING_KEY:-jwt-signing-key-change-in-production}
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - REACT_APP_WORKOS_CLIENT_ID=${WORKOS_CLIENT_ID:-client_your_client_id}
      - REACT_APP_WORKOS_REDIRECT_URI=${WORKOS_REDIRECT_URI:-http://localhost:3000/auth/callback}
      - REACT_APP_API_BASE=http://localhost:8000/api
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # Nginx (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - backend_static:/var/www/static:ro
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
  backend_static:

networks:
  default:
    name: workos_fullstack_network
